name: run tests Android CI

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write
  checks: write
  
jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          # - os: ubuntu-latest
          #   version: 29
          #   target: google_apis
          #   arch: x86_64
          #   profile: "Pixel 4 XL"
          # - os: ubuntu-latest
          #   version: 30
          #   target: google_apis
          #   arch: x86_64
          #   profile: "Pixel 4 XL"
          # - os: ubuntu-latest
          #   version: 34
          #   target: google_apis
          #   arch: x86_64
          #   profile: "Pixel 7 Pro"

          - os: macos-13
            #macos-latest
            version: 34
            target: aosp_atd
            arch: x86_64
            profile: "Nexus 6"
            channel: canary
            
          # - os: ubuntu-latest
          #   version: 34
          #   target: google_apis
          #   arch: x86_64
          #   profile: "Nexus 6"

          # - { version: '31', arch: "x86_64", target: "google_apis", profile: "Pixel 4 XL"}
          # # - { version: '33', arch: "x86_64", target: "google_apis", profile: "Pixel XL" }
    steps:
      - name: checkout
        uses: actions/checkout@v4
        
      - name: Set Up JDK Environment
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # - name: Assemble tests
      #   run: ./gradlew assembleAndroidTest

      - name: Enable KVM for linux runners
        if: runner.os == 'Linux'
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
      # - name: AVD cache
      #   uses: actions/cache@v4
      #   id: avd-cache
      #   with:
      #     path: |
      #       ~/.android/avd/*
      #       ~/.android/adb*
      #     key: avd-${{ matrix.version }}-${{ matrix.os }}-${{ matrix.target }}

      # - name: Create AVD and generate snapshot for caching
      #   if: steps.avd-cache.outputs.cache-hit != 'true'
      #   uses: reactivecircus/android-emulator-runner@v2.28.0
      #   with:
      #     api-level: ${{ matrix.version }}
      #     target: ${{ matrix.target }}
      #     profile: ${{ matrix.profile }}
      #     arch: ${{ matrix.arch }}
      #     avd-name: nexus_6
      #     ram-size: 4096M
      #     heap-size: 512M
      #     ndk: 21.0.6113669
      #     cmake: 3.10.2.4988404
      #     force-avd-creation: false
      #     channel: ${{ matrix.channel }}
      #     emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
      #     disable-animations: false
      #     script: |
      #        adb devices
      #        echo "Generated AVD snapshot for caching."

      - name: Connect Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.version }}
          target: ${{ matrix.target }}
          profile: ${{ matrix.profile }}
          arch: ${{ matrix.arch }}
          channel: ${{ matrix.channel }}
          ndk: 21.0.6113669
          cmake: 3.10.2.4988404
          emulator-boot-timeout: 300000
          script: |
                  EMU_BOOTED=0
                  n=0
                  first_launcher=1
                  echo 1 > /tmp/failed
                  while [[ $EMU_BOOTED = 0 ]];do
                      echo "Test for current focus"
                      #        $ANDROID_HOME/platform-tools/adb shell dumpsys window
                      CURRENT_FOCUS=`$ANDROID_HOME/platform-tools/adb shell dumpsys window 2>/dev/null | grep -i mCurrentFocus`
                      echo "Current focus: ${CURRENT_FOCUS}"
                      case $CURRENT_FOCUS in
                      *"Launcher"*)
                        if [[ $first_launcher == 1 ]]; then
                          echo "Launcher seems to be ready, wait 10 sec for another popup..."
                          sleep 10
                          first_launcher=0
                        else
                          echo "Launcher is ready, Android boot completed"
                          EMU_BOOTED=1
                          rm /tmp/failed
                        fi
                      ;;
                      *"Not Responding: com.android.systemui"*)
                        echo "Dismiss System UI isn't responding alert"
                        adb shell input keyevent KEYCODE_ENTER
                        adb shell input keyevent KEYCODE_DPAD_DOWN
                        adb shell input keyevent KEYCODE_ENTER
                        first_launcher=1
                      ;;
                      *"Not Responding: com.google.android.gms"*)
                        echo "Dismiss GMS isn't responding alert"
                        adb shell input keyevent KEYCODE_ENTER
                        first_launcher=1
                      ;;
                      *"Not Responding: system"*)
                        echo "Dismiss Process system isn't responding alert"
                        adb shell input keyevent KEYCODE_ENTER
                        first_launcher=1
                      ;;
                      *"ConversationListActivity"*)
                        echo "Close Messaging app"
                        adb shell input keyevent KEYCODE_ENTER
                        first_launcher=1
                      ;;
                      *)
                        n=$((n + 1))
                        echo "Waiting Android to boot 10 sec ($n)..."
                        sleep 10
                        if [ $n -gt 60 ]; then
                            echo "Android Emulator does not start in 10 minutes"
                            exit 2
                        fi
                      ;;
                      esac
                  done
                  echo "Android Emulator started."
                  ./gradlew connectedCheck
             
      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.version }}
          target: ${{ matrix.target }}
          profile: ${{ matrix.profile }}
          arch: ${{ matrix.arch }}
          channel: ${{ matrix.channel }}
          # avd-name: nexus_6
          # ram-size: 4096M
          # heap-size: 512M
          ndk: 21.0.6113669
          cmake: 3.10.2.4988404
          emulator-boot-timeout: 300000
          # force-avd-creation: false
          # emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          # disable-animations: true
          script: |
            avdmanager list device
            adb shell wm size
            adb shell wm density
            ./gradlew app:connectedDebugAndroidTest

      - name: Upload reports on API ${{ matrix.version }}
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-suite-${{ matrix.version }}
          path: |
            app/build/outputs/*/connected/*
            app/build/reports/androidTests/connected/**
            
      - name: Generate reports on API ${{ matrix.version }}
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Report on API ${{ matrix.version }}
          path: app/build/outputs/androidTest-results/connected/*.xml
          reporter: java-junit
          fail-on-empty: 'false'
          fail-on-error: 'false'
